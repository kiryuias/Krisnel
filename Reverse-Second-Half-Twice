# Python program to modify a singly linked list
# By Reversing the 2nd Half Twice 
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Function to reverse a linked list iteratively
def reverse(head):
  
    # Initialize previous, current,
    # and next pointers
    prev = None
    curr = head

    # Traverse and reverse the linked list
    while curr is not None:
        next_node = curr.next

        # Reverse the current node's pointer
        curr.next = prev
        prev = curr
        curr = next_node

    return prev

# Function to modify the linked list
def modifyTheList(head):
  
    # Returning head if list has only one node
    if head.next is None:
        return head

    slow = head
    fast = head

    # Finding the middle node of the linked list
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next

    mid = slow

    # Storing the second half of the list starting
    # after the middle node
    reversed_list = mid.next

    # Splitting the list into two halves
    mid.next = None

    # Reversing the second half of the list
    reversed_list = reverse(reversed_list)

    curr1 = head
    curr2 = reversed_list

    # Iterating over both halves of the list 
    # and modifying the values
    while curr2 is not None:
        x = curr1.data
        curr1.data = curr2.data - x
        curr2.data = x
        curr1 = curr1.next
        curr2 = curr2.next

    # Reversing the second half of the list 
    # again and connecting both halves
    mid.next = reverse(reversed_list)
    
    return head

def print_list(node):
    curr = node
    while curr is not None:
        print(curr.data, end=" ")
        curr = curr.next

if __name__ == "__main__":
  
    # Create a hard-coded linked list
    # 10 -> 4 -> 5 -> 3 -> 6
    head = Node(10)
    head.next = Node(4)
    head.next.next = Node(5)
    head.next.next.next = Node(3)
    head.next.next.next.next = Node(6)

    head = modifyTheList(head)

    print_list(head)
